#!/bin/bash

usage=\
"Usage: $(basename "$0") [OPTION]...\n
Build Krita AppImage\n
\n
where:\n
    -h,      --help              show this help text\n
    -jN,     --jobs=N            use N parallel jobs, default value is \`nproc\`\n
             --debug             include debugging information into AppImage \n
                                 (off by default)\n
"

INCLUDE_DEBUG_SYMBOLS=0
JOBS=`nproc`

# Call getopt to validate the provided input. 
options=$(getopt -o j:h --long debug,jobs:,help -- "$@")
[ $? -eq 0 ] || { 
    echo "Incorrect options provided"
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
    --debug)
        INCLUDE_DEBUG_SYMBOLS=1
        ;;
    -j | --jobs)
        shift;
        JOBS=$1
        ;;
    -h | --help)
        echo -e $usage >&2
        exit 1
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/find_default_container_file.inc

container_name=$(findContainerName)
if [ -z ${container_name} ]; then
    exit 1
fi

tryStartContainer $container_name

if [ $INCLUDE_DEBUG_SYMBOLS -eq 0 ]; then
    ${DOCKER_BINARY} exec -ti ${container_name} bash -i -c "cd /home/appimage && ~/bin/build_krita_appimage.sh -j$JOBS"
else
    ${DOCKER_BINARY} exec -ti ${container_name} bash -i -c "cd /home/appimage && ~/bin/build_krita_appimage.sh -j$JOBS --debug"
fi
